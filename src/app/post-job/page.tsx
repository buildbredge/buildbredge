"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { X, FileImage, Upload, AlertCircle, Check, FileText, Download, Globe } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { projectsApi } from "@/lib/api"
import { uploadProjectImages, uploadProjectDocuments, validateFile } from "../../../lib/storage"
import GooglePlacesAutocomplete, { SelectedAddressDisplay, PlaceResult } from "@/components/GooglePlacesAutocomplete"
import CategoryProfessionSelector from "@/components/CategoryProfessionSelector"
import { useAuth } from "@/contexts/AuthContext"
import { useRouter } from "next/navigation"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"

interface JobForm {
  subject: string
  detailedDescription: string
  email: string
  phone: string
  images: File[]
  files: File[]
  // Google PlacesÁõ∏ÂÖ≥Â≠óÊÆµ
  googlePlace?: PlaceResult
  // ÂàÜÁ±ªÂíåËÅå‰∏öÁõ∏ÂÖ≥Â≠óÊÆµ
  categoryId?: string
  professionId?: string
  isOther: boolean
  otherDescription: string
  // Êñ∞Â¢ûÂ≠óÊÆµ
  timeOption: string
  priorityNeed: string
  language: string
}

interface UploadProgress {
  images: { [index: number]: number }
  files: { [index: number]: number }
}


export default function PostJobPage() {
  console.log("=== POST JOB PAGE LOADED ===", new Date().toISOString())

  const { user } = useAuth()
  const router = useRouter()

  const [jobForm, setJobForm] = useState<JobForm>({
    subject: "",
    detailedDescription: "",
    email: "",
    phone: "",
    images: [],
    files: [],
    googlePlace: undefined,
    categoryId: undefined,
    professionId: undefined,
    isOther: false,
    otherDescription: "",
    timeOption: "urgent",
    priorityNeed: "quality",
    language: user?.language || "‰∏≠/EN"
  })
  const [imagePreviews, setImagePreviews] = useState<string[]>([])
  const [isUploading, setIsUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState<UploadProgress>({ images: {}, files: {} })
  const [uploadError, setUploadError] = useState<string>("")
  const imageInputRef = useRef<HTMLInputElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [validationErrors, setValidationErrors] = useState<string[]>([])
  const [showSuccessModal, setShowSuccessModal] = useState(false)



  const handleSubmit = async () => {
    // Á¨¨‰∏ÄÊ≠•ÔºöË°®ÂçïÈ™åËØÅ
    const errors = validateForm()
    if (errors.length > 0) {
      setValidationErrors(errors)
      setUploadError(`Ë°®ÂçïÈ™åËØÅÂ§±Ë¥•:\n${errors.join('\n')}`)
      return
    }

    setValidationErrors([])
    setUploadError("")

    // Á¨¨‰∫åÊ≠•ÔºöÊ†πÊçÆÁôªÂΩïÁä∂ÊÄÅ‰øùÂ≠òÈ°πÁõÆ
    if (user) {
      // Â∑≤ÁôªÂΩïÁî®Êà∑Ôºö‰øùÂ≠òÈ°πÁõÆÂπ∂ÂÖ≥ËÅîÁî®Êà∑ID
      await saveProject(user.id)
    } else {
      // Êú™ÁôªÂΩïÁî®Êà∑Ôºö‰øùÂ≠òÂåøÂêçÈ°πÁõÆ
      await saveProject(null)
    }
  }


  // ‰øùÂ≠òÈ°πÁõÆÁöÑÊ†∏ÂøÉÂáΩÊï∞
  const saveProject = async (userId: string | null = null) => {
    setIsUploading(true)
    setUploadError("")

    try {
      console.log('üöÄ ÂºÄÂßãÊèê‰∫§È°πÁõÆ...')

      // Ëé∑ÂèñÂú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØ
      const locationString = jobForm.googlePlace?.address || ''
      const latitude = jobForm.googlePlace?.coordinates?.lat || null
      const longitude = jobForm.googlePlace?.coordinates?.lng || null

      console.log('üìç ‰ΩçÁΩÆ‰ø°ÊÅØ:', {
        location: locationString,
        coordinates: { latitude, longitude }
      })

      // Â¶ÇÊûúÊúâÊñá‰ª∂ÔºåÂÖà‰∏ä‰º†Êñá‰ª∂ÂÜçÂàõÂª∫È°πÁõÆ
      let uploadedImageUrls: string[] = []
      let uploadedVideoUrl: string | null = null
      let uploadedFileUrls: string[] = []
      
      // ‰∏∫‰∫ÜËé∑ÂèñÈ°πÁõÆIDÁî®‰∫éÊñá‰ª∂‰∏ä‰º†ÔºåÊàë‰ª¨ÂÖàÁîüÊàê‰∏Ä‰∏™‰∏¥Êó∂ID
      const tempProjectId = crypto.randomUUID()

      // ‰∏ä‰º†ÂõæÁâá
      if (jobForm.images.length > 0) {
        console.log('üì∏ ÂºÄÂßã‰∏ä‰º†ÂõæÁâá...')
        try {
          uploadedImageUrls = await uploadProjectImages(
            jobForm.images,
            tempProjectId,
            (fileIndex, progress) => {
              setUploadProgress(prev => ({
                ...prev,
                images: { ...prev.images, [fileIndex]: progress }
              }))
            }
          )
          console.log('‚úÖ ÂõæÁâá‰∏ä‰º†ÊàêÂäü:', uploadedImageUrls)
        } catch (error) {
          console.error('‚ùå ÂõæÁâá‰∏ä‰º†Â§±Ë¥•:', error)
          setUploadError(`ÂõæÁâá‰∏ä‰º†Â§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`)
          // ÁªßÁª≠ÊâßË°åÔºå‰∏çÈòªÊñ≠ÊµÅÁ®ã
        }
      }

      // ‰∏ä‰º†Êñá‰ª∂
      if (jobForm.files.length > 0) {
        console.log('üìÑ ÂºÄÂßã‰∏ä‰º†ÊñáÊ°£...')
        try {
          uploadedFileUrls = await uploadProjectDocuments(
            jobForm.files,
            tempProjectId,
            (fileIndex, progress) => {
              setUploadProgress(prev => ({
                ...prev,
                files: { ...prev.files, [fileIndex]: progress }
              }))
            }
          )
          console.log('‚úÖ ÊñáÊ°£‰∏ä‰º†ÊàêÂäü:', uploadedFileUrls)
        } catch (error) {
          console.error('‚ùå ÊñáÊ°£‰∏ä‰º†Â§±Ë¥•:', error)
          setUploadError(`ÊñáÊ°£‰∏ä‰º†Â§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`)
          // ÁªßÁª≠ÊâßË°åÔºå‰∏çÈòªÊñ≠ÊµÅÁ®ã
        }
      }


      // ÂàõÂª∫È°πÁõÆËÆ∞ÂΩïÔºåÂåÖÂê´Â∑≤‰∏ä‰º†ÁöÑÊñá‰ª∂URL
      const projectData: any = {
        description: jobForm.subject,
        location: locationString,
        latitude,
        longitude,
        detailed_description: jobForm.detailedDescription,
        email: jobForm.email,
        phone: jobForm.phone || null,
        images: uploadedImageUrls, // Áõ¥Êé•ÂåÖÂê´‰∏ä‰º†ÁöÑÂõæÁâáURL
        files: uploadedFileUrls, // Áõ¥Êé•ÂåÖÂê´‰∏ä‰º†ÁöÑÊñá‰ª∂URL
        status: 'published' as const,
        user_id: userId || null, // Â¶ÇÊûúÊòØÂåøÂêçÁî®Êà∑Âàô‰∏∫null
        category_id: jobForm.isOther ? null : (jobForm.categoryId || null),
        profession_id: jobForm.isOther ? null : (jobForm.professionId || null),
        other_description: jobForm.isOther ? jobForm.otherDescription : null,
        time_option: jobForm.timeOption || 'urgent',
        priority_need: jobForm.priorityNeed || 'quality',
        language: jobForm.language || '‰∏≠/EN'
      }

      console.log('üìã ÂàõÂª∫È°πÁõÆËÆ∞ÂΩïÔºàÂåÖÂê´Êñá‰ª∂URLÔºâ...', projectData)
      const createdProject = await projectsApi.create(projectData)
      
      if (!createdProject || !createdProject.id) {
        throw new Error('È°πÁõÆÂàõÂª∫Â§±Ë¥•ÔºöÊú™ËøîÂõûÊúâÊïàÁöÑÈ°πÁõÆID')
      }
      
      const projectId = createdProject.id
      console.log('‚úÖ È°πÁõÆÂàõÂª∫ÊàêÂäüÔºåID:', projectId)

      // ÂèëÈÄÅÈÇÆ‰ª∂ÈÄöÁü•
      try {
        console.log('üìß ÂºÄÂßãÂèëÈÄÅÈÇÆ‰ª∂ÈÄöÁü•...')
        const notificationResponse = await fetch('/api/projects/notify', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ projectId })
        })

        if (notificationResponse.ok) {
          const notificationResult = await notificationResponse.json()
          console.log('‚úÖ ÈÇÆ‰ª∂ÈÄöÁü•ÂèëÈÄÅÊàêÂäü:', notificationResult)
        } else {
          console.error('‚ùå ÈÇÆ‰ª∂ÈÄöÁü•ÂèëÈÄÅÂ§±Ë¥•:', await notificationResponse.text())
          // ‰∏çÂΩ±Âìç‰∏ªÊµÅÁ®ãÔºåÁªßÁª≠Ë∑≥ËΩ¨
        }
      } catch (error) {
        console.error('‚ùå ÂèëÈÄÅÈÇÆ‰ª∂ÈÄöÁü•Êó∂Âá∫Èîô:', error)
        // ‰∏çÂΩ±Âìç‰∏ªÊµÅÁ®ãÔºåÁªßÁª≠Ë∑≥ËΩ¨
      }

      // ‰øùÂ≠òÊàêÂäüÔºåÊòæÁ§∫ÊàêÂäüÊèêÁ§∫ÊàñË∑≥ËΩ¨
      if (!user) {
        // ÂåøÂêçÁî®Êà∑ÊòæÁ§∫ÁâπÂà´ÁöÑÊàêÂäü‰ø°ÊÅØ
        setShowSuccessModal(true)
      } else {
        // Ê≥®ÂÜåÁî®Êà∑Áõ¥Êé•Ë∑≥ËΩ¨Âà∞È°πÁõÆËØ¶ÊÉÖÈ°µ
        router.push(`/projects/${projectId}`)
      }

    } catch (error) {
      console.error('‚ùå ÂèëÂ∏ÉÈ°πÁõÆÊó∂Âá∫Èîô:', error)
      
      // ‰∏∫ÂåøÂêçÁî®Êà∑Êèê‰æõÊõ¥ÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ
      let errorMessage = 'ÂèëÂ∏ÉÈ°πÁõÆÊó∂Âá∫Èîô'
      
      if (error instanceof Error) {
        // Ê£ÄÊü•Â∏∏ËßÅÈîôËØØÁ±ªÂûãÂπ∂Êèê‰æõÂèãÂ•Ω‰ø°ÊÅØ
        if (error.message.includes('email')) {
          errorMessage = 'ÈÇÆÁÆ±Âú∞ÂùÄÊúâËØØÔºåËØ∑Ê£ÄÊü•ÂêéÈáçËØï'
        } else if (error.message.includes('location') || error.message.includes('address')) {
          errorMessage = '‰ΩçÁΩÆ‰ø°ÊÅØÊúâËØØÔºåËØ∑ÈáçÊñ∞ÈÄâÊã©Âú∞ÂùÄ'
        } else if (error.message.includes('category') || error.message.includes('profession')) {
          errorMessage = 'ÊúçÂä°Á±ªÂà´ÈÄâÊã©ÊúâËØØÔºåËØ∑ÈáçÊñ∞ÈÄâÊã©'
        } else if (error.message.includes('network') || error.message.includes('fetch')) {
          errorMessage = 'ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï'
        } else if (error.message.includes('timeout')) {
          errorMessage = 'Êèê‰∫§Ë∂ÖÊó∂ÔºåËØ∑ÈáçËØï'
        } else {
          errorMessage = `ÂèëÂ∏ÉÈ°πÁõÆÊó∂Âá∫Èîô: ${error.message}`
        }
      }
      
      // Â¶ÇÊûúÊòØÂåøÂêçÁî®Êà∑ÔºåÊ∑ªÂä†È¢ùÂ§ñÁöÑÂ∏ÆÂä©‰ø°ÊÅØ
      if (!user) {
        errorMessage += '\n\nüí° ÊèêÁ§∫ÔºöÂ¶ÇÊûúÈóÆÈ¢òÊåÅÁª≠Â≠òÂú®ÔºåÊÇ®ÂèØ‰ª•Ôºö\n‚Ä¢ Ê£ÄÊü•ÈÇÆÁÆ±Âú∞ÂùÄÊòØÂê¶Ê≠£Á°Æ\n‚Ä¢ Á°Æ‰øùÈÄâÊã©‰∫ÜÊ≠£Á°ÆÁöÑ‰ΩçÁΩÆ\n‚Ä¢ Á®çÂêéÈáçËØï\n‚Ä¢ ÊàñËÄÉËôëÊ≥®ÂÜåË¥¶Êà∑‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑÊîØÊåÅ'
      }
      
      setUploadError(errorMessage)
    } finally {
      setIsUploading(false)
      setUploadProgress({ images: {}, files: {} })
    }
  }


  const updateJobForm = (field: keyof JobForm, value: any) => {
    setJobForm(prev => ({ ...prev, [field]: value }))
    // Ê∏ÖÈô§ÈîôËØØ‰ø°ÊÅØÂΩìÁî®Êà∑ÂºÄÂßãËæìÂÖ•Êó∂
    if (uploadError) {
      setUploadError("")
    }
    if (validationErrors.length > 0) {
      setValidationErrors([])
    }
  }

  // Â§ÑÁêÜGoogle PlacesÂú∞ÂùÄÈÄâÊã©
  const handlePlaceSelect = (place: PlaceResult) => {
    setJobForm(prev => ({
      ...prev,
      googlePlace: place
    }))
  }


  const handleImageUpload = async (files: FileList | null) => {
    if (!files || isUploading) return
    
    setUploadError("") // Ê∏ÖÈô§‰πãÂâçÁöÑÈîôËØØ

    const newFiles = Array.from(files).slice(0, 5 - jobForm.images.length)
    
    // È™åËØÅÊñá‰ª∂
    const validFiles: File[] = []
    const errors: string[] = []

    for (const file of newFiles) {
      const validation = validateFile(file, 'image')
      if (validation.valid) {
        validFiles.push(file)
      } else {
        errors.push(`${file.name}: ${validation.error}`)
      }
    }

    if (errors.length > 0) {
      setUploadError(`‰ª•‰∏ãÂõæÁâáÊñá‰ª∂Êó†Ê≥ï‰∏ä‰º†:\n${errors.join('\n')}`)
    }

    if (validFiles.length === 0) {
      if (imageInputRef.current) {
        imageInputRef.current.value = ''
      }
      return
    }

    // ÂàõÂª∫È¢ÑËßà
    const newPreviews = validFiles.map(file => URL.createObjectURL(file))
    setImagePreviews(prev => [...prev, ...newPreviews])
    setJobForm(prev => ({ ...prev, images: [...prev.images, ...validFiles] }))

    if (imageInputRef.current) {
      imageInputRef.current.value = ''
    }
  }


  const removeImage = (index: number) => {
    const newPreviews = imagePreviews.filter((_, i) => i !== index)
    const newImages = jobForm.images.filter((_, i) => i !== index)

    URL.revokeObjectURL(imagePreviews[index])
    setImagePreviews(newPreviews)
    setJobForm(prev => ({ ...prev, images: newImages }))
  }

  const handleFileUpload = async (files: FileList | null) => {
    if (!files || isUploading) return
    
    setUploadError("") // Ê∏ÖÈô§‰πãÂâçÁöÑÈîôËØØ

    const newFiles = Array.from(files).slice(0, 3 - jobForm.files.length)
    
    // È™åËØÅÊñá‰ª∂
    const validFiles: File[] = []
    const errors: string[] = []

    for (const file of newFiles) {
      const validation = validateFile(file, 'document')
      if (validation.valid) {
        validFiles.push(file)
      } else {
        errors.push(`${file.name}: ${validation.error}`)
      }
    }

    if (errors.length > 0) {
      setUploadError(`‰ª•‰∏ãÊñá‰ª∂Êó†Ê≥ï‰∏ä‰º†:\n${errors.join('\n')}`)
    }

    if (validFiles.length === 0) {
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
      return
    }

    // Ê∑ªÂä†Âà∞Êñá‰ª∂ÂàóË°®
    setJobForm(prev => ({ ...prev, files: [...prev.files, ...validFiles] }))

    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  const removeFile = (index: number) => {
    const newFiles = jobForm.files.filter((_, i) => i !== index)
    setJobForm(prev => ({ ...prev, files: newFiles }))
  }

  const downloadFile = (file: File) => {
    const url = URL.createObjectURL(file)
    const a = document.createElement('a')
    a.href = url
    a.download = file.name
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }


  // Â¢ûÂº∫ÁöÑË°®ÂçïÈ™åËØÅÂáΩÊï∞ÔºàÁî®‰∫éÊèê‰∫§Êó∂ÁöÑÂÆåÊï¥È™åËØÅÔºâ
  const validateForm = (): string[] => {
    const errors: string[] = []
    
    // È™åËØÅÈÇÆÁÆ±
    if (!jobForm.email.trim()) {
      errors.push("ËØ∑Â°´ÂÜôÈÇÆÁÆ±Âú∞ÂùÄ")
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email)) {
      errors.push("ËØ∑Â°´ÂÜôÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ")
    }
    
    // È™åËØÅ‰ΩçÁΩÆ‰ø°ÊÅØ
    if (!jobForm.googlePlace) {
      errors.push("ËØ∑ÈÄâÊã©È°πÁõÆ‰ΩçÁΩÆ")
    }
    
    // È™åËØÅÁÆÄÂçïÊèèËø∞ÂíåËØ¶ÁªÜÊèèËø∞
    if (!jobForm.subject.trim()) {
      errors.push("ËØ∑Â°´ÂÜôÁÆÄÂçïÊèèËø∞")
    } else if (jobForm.subject.trim().length < 5) {
      errors.push("ÁÆÄÂçïÊèèËø∞Ëá≥Â∞ëÈúÄË¶Å5‰∏™Â≠óÁ¨¶")
    }
    
    if (!jobForm.detailedDescription.trim()) {
      errors.push("ËØ∑ÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç")
    } else if (jobForm.detailedDescription.trim().length < 10) {
      errors.push("È°πÁõÆÊèèËø∞Ëá≥Â∞ëÈúÄË¶Å10‰∏™Â≠óÁ¨¶")
    }
    
    // È™åËØÅÊúçÂä°Á±ªÂà´ÂíåËÅå‰∏ö
    if (!jobForm.isOther) {
      if (!jobForm.categoryId) {
        errors.push("ËØ∑ÈÄâÊã©ÊúçÂä°Á±ªÂà´")
      }
      if (!jobForm.professionId) {
        errors.push("ËØ∑ÈÄâÊã©ÂÖ∑‰ΩìËÅå‰∏ö")
      }
    } else {
      if (!jobForm.otherDescription.trim()) {
        errors.push("ËØ∑Â°´ÂÜôÂÖ∂‰ªñÊúçÂä°ÂÜÖÂÆπÁöÑÊèèËø∞")
      } else if (jobForm.otherDescription.trim().length < 5) {
        errors.push("ÂÖ∂‰ªñÊúçÂä°ÊèèËø∞Ëá≥Â∞ëÈúÄË¶Å5‰∏™Â≠óÁ¨¶")
      }
    }
    
    return errors
  }

  // ÁÆÄÂåñÁöÑË°®ÂçïÈ™åËØÅÂáΩÊï∞ÔºàÁî®‰∫éÊåâÈíÆdisabledÁä∂ÊÄÅ - Âè™Ê£ÄÊü•ÂøÖÂ°´È°πÔºâ
  const isFormValid = () => {
    // Ê£ÄÊü•ÈÇÆÁÆ±„ÄÅÁÆÄÂçïÊèèËø∞ÂíåÈ°πÁõÆËØ¶ÊÉÖ
    const hasEmail = jobForm.email.trim() && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email)
    const hasSubject = jobForm.subject.trim().length > 0
    const hasDescription = jobForm.detailedDescription.trim().length > 0
    
    // Ê£ÄÊü•ÂàÜÁ±ª/ËÅå‰∏öÈÄâÊã©
    const hasValidCategory = jobForm.isOther 
      ? jobForm.otherDescription.trim().length > 0
      : (jobForm.categoryId && jobForm.professionId)
    
    // Ê∑ªÂä†Êõ¥ËØ¶ÁªÜÁöÑË∞ÉËØï‰ø°ÊÅØ
    const isValid = hasEmail && hasSubject && hasDescription && hasValidCategory
    console.log('=== Ë°®ÂçïÈ™åËØÅÁä∂ÊÄÅ ===', {
      email: jobForm.email,
      emailTrimmed: jobForm.email.trim(),
      emailRegexTest: /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email),
      hasEmail,
      subject: jobForm.subject,
      hasSubject,
      description: jobForm.detailedDescription,
      descriptionTrimmed: jobForm.detailedDescription.trim(),
      descriptionLength: jobForm.detailedDescription.trim().length,
      hasDescription,
      isUploading,
      finalIsValid: isValid,
      buttonShouldBeDisabled: !isValid || isUploading
    })
    
    return isValid
  }



  return (
    <div className="min-h-screen bg-gray-50">
      {/* Main content */}
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-normal text-green-600 mb-6">
              ‰∏ìÂ±ûÂÆ¢Êúç‰∏∫ÊÇ®ÊúçÂä°
            </h1>
            <p className="text-xl text-gray-600">
              Â°´ÂÜôÊÇ®ÁöÑÈúÄÊ±Ç‰ø°ÊÅØÔºåÊàë‰ª¨‰∏∫ÊÇ®ÂåπÈÖçÂΩìÂú∞ÁöÑ‰∏ì‰∏ö‰∫∫Â£´„ÄÇ
            </p>
          </div>

          <form className="space-y-8">
            {/* Âçï‰∏ÄË°®ÂçïÂç°Áâá */}
            <div className="bg-white rounded-lg border p-8 shadow-sm">
              <div className="space-y-8">
                {/* ÈöêÁßÅÊèêÁ§∫ */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-sm text-blue-700">
                    Êàë‰ª¨‰ºöÈóÆÊÇ®Âá†‰∏™ÈóÆÈ¢òÔºå‰ª•‰æøÂú®Âá†ÂàÜÈíüÂÜÖÂ∏ÆÊÇ®ËÅîÁ≥ªÂà∞ÂêàÈÄÇÁöÑÂïÜÂÆ∂ÊàñÊäÄÂ∑•„ÄÇÂ∏¶ÁÖßÁâáÁöÑ‰ªãÁªçÂèØÊèêÈ´ò 20% ÁöÑÊäÄÂ∑•ÂÖ¥Ë∂£„ÄÇ‰∏∫‰øùÊä§ÊÇ®ÁöÑÈöêÁßÅÔºåËØ∑ÂãøÂú®ËÅå‰ΩçÂêçÁß∞ÊàñÊèèËø∞‰∏≠ÂåÖÂê´ÂßìÂêç„ÄÅÁîµËØùÊàñÂú∞ÂùÄ„ÄÇ
                  </p>
                  {!user && (
                    <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                      <p className="text-sm text-yellow-800">
                        <strong>ÂåøÂêçÂèëÂ∏ÉÊèêÈÜíÔºö</strong>ÊÇ®Ê≠£Âú®‰ª•ÂåøÂêçÁî®Êà∑Ë∫´‰ªΩÂèëÂ∏ÉÈ°πÁõÆ„ÄÇÈ°πÁõÆÂèëÂ∏ÉÂêéÔºåÊàë‰ª¨‰ºöÂêëÊÇ®ÁöÑÈÇÆÁÆ±ÂèëÈÄÅÁ°ÆËÆ§ÈÇÆ‰ª∂ÔºåËØ∑‰øùÂ≠òÈÇÆ‰ª∂‰Ωú‰∏∫È°πÁõÆÂá≠ËØÅ„ÄÇ
                      </p>
                    </div>
                  )}
                </div>

                {/* ÁÆÄÂçïÊèèËø∞ */}
                <div>
                  <Label htmlFor="subject" className="text-lg font-medium">ÁÆÄÂçïÊèèËø∞ *</Label>
                  <Input
                    id="subject"
                    type="text"
                    placeholder="ÁÆÄÂçïÊèèËø∞ÊÇ®ÁöÑÈúÄÊ±ÇÔºå‰æãÂ¶ÇÔºöÊõ¥Êç¢Ê∞¥ÈæôÂ§¥„ÄÅÂÆ§ÂÜÖË£Ö‰øÆ„ÄÅÊàøÂ±ãÂåîÁ≠ëÁ≠â"
                    value={jobForm.subject}
                    onChange={(e) => updateJobForm('subject', e.target.value)}
                    className="mt-2"
                  />
                </div>

                {/* ËÅîÁ≥ª‰ø°ÊÅØ */}
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 mb-6">ËÅîÁ≥ª‰ø°ÊÅØ</h2>
                  <div className="grid gap-6 md:grid-cols-2">
                    <div>
                      <Label htmlFor="email" className="text-lg font-medium">ÈÇÆÁÆ±Âú∞ÂùÄ *</Label>
                      <Input
                        id="email"
                        type="email"
                        placeholder="your.email@example.com"
                        value={jobForm.email}
                        onChange={(e) => updateJobForm('email', e.target.value)}
                        className="mt-2"
                      />
                    </div>

                    <div>
                      <Label htmlFor="phone" className="text-lg font-medium">ËÅîÁ≥ªÊñπÂºèÔºàÁîµËØùÔºâ</Label>
                      <Input
                        id="phone"
                        type="tel"
                        placeholder="+64 21 123 4567"
                        value={jobForm.phone}
                        onChange={(e) => updateJobForm('phone', e.target.value)}
                        className="mt-2"
                      />
                    </div>
                  </div>
                </div>

                {/* ‰ΩçÁΩÆ‰ø°ÊÅØ */}
                <div>
               
                  <div className="space-y-4">
                    {!jobForm.googlePlace ? (
                      <GooglePlacesAutocomplete
                        onPlaceSelect={handlePlaceSelect}
                        placeholder="ËæìÂÖ•ÊÇ®ÁöÑËØ¶ÁªÜÂú∞ÂùÄ..."
                        label="È°πÁõÆ‰ΩçÁΩÆ"
                        className="h-12 text-lg"
                      />
                    ) : (
                      <SelectedAddressDisplay
                        place={jobForm.googlePlace}
                        onEdit={() => setJobForm(prev => ({ ...prev, googlePlace: undefined }))}
                      />
                    )}
                  </div>
                </div>

                {/* ÊúçÂä°Á±ªÂà´ÈÄâÊã© */}
                <CategoryProfessionSelector
                  selectedCategoryId={jobForm.categoryId}
                  selectedProfessionId={jobForm.professionId}
                  isOther={jobForm.isOther}
                  otherDescription={jobForm.otherDescription}
                  onCategoryChange={(categoryId) => updateJobForm('categoryId', categoryId)}
                  onProfessionChange={(professionId) => updateJobForm('professionId', professionId)}
                  onOtherToggle={(isOther) => updateJobForm('isOther', isOther)}
                  onOtherDescriptionChange={(description) => updateJobForm('otherDescription', description)}
                />

                {/* È°πÁõÆËØ¶ÊÉÖ */}
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 mb-6">È°πÁõÆËØ¶ÊÉÖ</h2>
                  <div className="space-y-6">
                    <div>
                      <Label htmlFor="detailed-description" className="text-lg font-medium">ÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç *</Label>
                      <p className="text-sm text-gray-500 mb-3">
                        ËØ∑ËØ¶ÁªÜÊèèËø∞ÊÇ®ÁöÑÈúÄÊ±ÇÔºåÊØîÂ¶ÇÔºöÊàëÊÉ≥Êõ¥Êç¢5‰∏™Ê∞¥ÈæôÂ§¥ÔºåÂ∑≤ÊúâÁÆ°ÈÅì„ÄÇÊàñËÄÖÊàëÊÉ≥Ë£Ö‰øÆÊàëÁöÑÊàøÂ≠êÔºåÈúÄË¶ÅÊõ¥Êç¢Â£ÅÁ∫∏ÔºåÁ≤âÂà∑Â±ãÈ°∂Ôºå‰ª•ÂèäÊõ¥Êç¢Á™óÊà∑„ÄÇÂÜçÊàñËÄÖÊàëÊÉ≥Âª∫‰∏ÄÊ†ãÊàøÂ≠êÈúÄË¶ÅÂàÜÂâ≤ÂúüÂú∞ËÆæËÆ°ÁªìÊûÑÊé¢Êü•Âú∞Âü∫Á≠âÁ≠â
                      </p>
                      <Textarea
                        id="detailed-description"
                        placeholder="ÊØîÂ¶ÇÊàëÊÉ≥Êõ¥Êç¢Ê∞¥ÁÆ°„ÄÅË£Ö‰øÆÊàøÂ≠ê„ÄÅÂª∫ÈÄ†Êñ∞ÊàøÁ≠âÔºåËØ∑ËØ¶ÁªÜÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç..."
                        value={jobForm.detailedDescription}
                        onChange={(e) => updateJobForm('detailedDescription', e.target.value)}
                        className="min-h-[150px] text-base"
                        rows={6}
                      />
                    </div>

                    {/* Êó∂Èó¥ÈÄâÈ°πÂíå‰ºòÂÖàÈ°π */}
                    <div className="grid gap-6 md:grid-cols-2">
                      {/* Êó∂Èó¥ÈÄâÈ°π */}
                      <div>
                        <Label className="text-lg font-medium">Êó∂Èó¥ÈÄâÈ°π</Label>
                        <Select value={jobForm.timeOption} onValueChange={(value) => updateJobForm('timeOption', value)}>
                          <SelectTrigger className="mt-2">
                            <SelectValue placeholder="ÈÄâÊã©Êó∂Èó¥ÈúÄÊ±Ç" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="urgent">Á¥ßÊÄ•Ôºà‰ªäÂ§©Ôºâ</SelectItem>
                            <SelectItem value="recent">ÊúÄËøëÂá†Â§©</SelectItem>
                            <SelectItem value="flexible">Ê≤°ÊúâÂõ∫ÂÆöÊó∂Èó¥</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {/* ÈúÄÊ±Ç‰ºòÂÖàÈ°π */}
                      <div>
                        <Label className="text-lg font-medium">ÈúÄÊ±Ç‰ºòÂÖàÈ°π</Label>
                        <Select value={jobForm.priorityNeed} onValueChange={(value) => updateJobForm('priorityNeed', value)}>
                          <SelectTrigger className="mt-2">
                            <SelectValue placeholder="ÈÄâÊã©‰ºòÂÖàÈ°π" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="cost">ÊàêÊú¨</SelectItem>
                            <SelectItem value="quality">Ë¥®Èáè</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      {/* ËØ≠Ë®ÄÂÅèÂ•Ω */}
                      <div>
                        <Label className="text-lg font-medium">
                          <Globe className="w-4 h-4 inline mr-2" />
                          ËØ≠Ë®ÄÂÅèÂ•Ω
                        </Label>
                        <Select value={jobForm.language} onValueChange={(value) => updateJobForm('language', value)}>
                          <SelectTrigger className="mt-2">
                            <SelectValue placeholder="ÈÄâÊã©ËØ≠Ë®ÄÂÅèÂ•Ω" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="‰∏≠Êñá">‰∏≠Êñá</SelectItem>
                            <SelectItem value="English">English</SelectItem>
                            <SelectItem value="‰∏≠/EN">‰∏≠/EN</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    {/* ÂõæÁâá‰∏ä‰º† */}
                    <div>
                        <Label className="text-lg font-medium">‰∏ä‰º†Áõ∏ÂÖ≥ÂõæÁâáÔºàÊúÄÂ§ö5Âº†Ôºâ</Label>

                        {imagePreviews.length > 0 && (
                          <div className="grid grid-cols-2 gap-4 mt-3 mb-4">
                            {imagePreviews.map((preview, index) => (
                              <div key={index} className="relative group">
                                <div className="aspect-square rounded-lg overflow-hidden bg-gray-100 border">
                                  <Image
                                    src={preview}
                                    alt={`È¢ÑËßàÂõæÁâá ${index + 1}`}
                                    width={200}
                                    height={200}
                                    className="w-full h-full object-cover"
                                  />
                                </div>
                                <Button
                                  variant="destructive"
                                  size="sm"
                                  className="absolute -top-2 -right-2 w-6 h-6 p-0 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                  onClick={() => removeImage(index)}
                                >
                                  <X className="w-3 h-3" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}

                        {imagePreviews.length < 5 && (
                          <Card className="border-dashed border-2 border-gray-300 hover:border-green-400 transition-colors mt-3">
                            <CardContent className="p-6">
                              <div
                                className="text-center cursor-pointer"
                                onClick={() => imageInputRef.current?.click()}
                              >
                                <FileImage className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                                <p className="text-gray-700 font-medium mb-2">ÁÇπÂáª‰∏ä‰º†ÂõæÁâá</p>
                                <p className="text-sm text-gray-500">
                                  ÊîØÊåÅ JPG„ÄÅPNG„ÄÅWebP Ê†ºÂºèÔºåÂçïÂº†ÊúÄÂ§ß 10MB
                                </p>
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        <input
                          ref={imageInputRef}
                          type="file"
                          multiple
                          accept="image/jpeg,image/png,image/webp"
                          onChange={(e) => handleImageUpload(e.target.files)}
                          className="hidden"
                        />
                    </div>

                    {/* Êñá‰ª∂‰∏ä‰º† */}
                    <div>
                        <Label className="text-lg font-medium">‰∏ä‰º†Áõ∏ÂÖ≥Êñá‰ª∂ÔºàÊúÄÂ§ö3‰∏™ÔºåÊØè‰∏™ÊúÄÂ§ß10MBÔºâ</Label>
                        <p className="text-sm text-gray-500 mb-3">
                          ÊîØÊåÅ PDF„ÄÅWord„ÄÅExcel„ÄÅPowerPoint„ÄÅÊñáÊú¨„ÄÅÂéãÁº©ÂåÖÁ≠âÊ†ºÂºè
                        </p>

                        {jobForm.files.length > 0 && (
                          <div className="space-y-2 mt-3 mb-4">
                            {jobForm.files.map((file, index) => (
                              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 border rounded-lg">
                                <div className="flex items-center space-x-3">
                                  <FileText className="w-5 h-5 text-blue-500" />
                                  <div>
                                    <p className="text-sm font-medium text-gray-900">{file.name}</p>
                                    <p className="text-xs text-gray-500">
                                      {(file.size / (1024 * 1024)).toFixed(1)} MB
                                    </p>
                                  </div>
                                </div>
                                <div className="flex items-center space-x-2">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => downloadFile(file)}
                                    className="h-8 w-8 p-0"
                                  >
                                    <Download className="w-4 h-4" />
                                  </Button>
                                  <Button
                                    variant="destructive"
                                    size="sm"
                                    onClick={() => removeFile(index)}
                                    className="h-8 w-8 p-0"
                                  >
                                    <X className="w-4 h-4" />
                                  </Button>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}

                        {jobForm.files.length < 3 && (
                          <Card className="border-dashed border-2 border-gray-300 hover:border-green-400 transition-colors mt-3">
                            <CardContent className="p-6">
                              <div
                                className="text-center cursor-pointer"
                                onClick={() => fileInputRef.current?.click()}
                              >
                                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                                <p className="text-gray-700 font-medium mb-2">ÁÇπÂáª‰∏ä‰º†Êñá‰ª∂</p>
                                <p className="text-sm text-gray-500">
                                  ÊîØÊåÅÂêÑÁßçÊ†ºÂºèÔºåÂçï‰∏™Êñá‰ª∂ÊúÄÂ§ß 10MB
                                </p>
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        <input
                          ref={fileInputRef}
                          type="file"
                          multiple
                          accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.csv,.zip,.rar"
                          onChange={(e) => handleFileUpload(e.target.files)}
                          className="hidden"
                        />
                    </div>

                    {/* ÈîôËØØ‰ø°ÊÅØÊòæÁ§∫ */}
                    {uploadError && (
                      <div className="flex items-start space-x-2 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
                        <AlertCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                        <div className="flex-1">
                          <p className="text-sm whitespace-pre-line">{uploadError}</p>
                        </div>
                      </div>
                    )}

                    {/* ‰∏ä‰º†ËøõÂ∫¶ÊòæÁ§∫ */}
                    {isUploading && (
                      <div className="space-y-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <Upload className="w-5 h-5 text-blue-600" />
                          <h4 className="font-medium text-blue-900">Ê≠£Âú®‰∏ä‰º†Êñá‰ª∂...</h4>
                        </div>

                        {/* ÂõæÁâá‰∏ä‰º†ËøõÂ∫¶ */}
                        {jobForm.images.length > 0 && (
                          <div className="space-y-2">
                            <p className="text-sm text-blue-700">ÂõæÁâá‰∏ä‰º†ËøõÂ∫¶:</p>
                            {jobForm.images.map((file, index) => (
                              <div key={index} className="space-y-1">
                                <div className="flex justify-between text-xs text-blue-600">
                                  <span>{file.name}</span>
                                  <span>{uploadProgress.images[index] || 0}%</span>
                                </div>
                                <div className="w-full bg-blue-200 rounded-full h-2">
                                  <div
                                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                    style={{ width: `${uploadProgress.images[index] || 0}%` }}
                                  ></div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Êñá‰ª∂‰∏ä‰º†ËøõÂ∫¶ */}
                        {jobForm.files.length > 0 && (
                          <div className="space-y-2 mt-4">
                            <p className="text-sm text-blue-700">Êñá‰ª∂‰∏ä‰º†ËøõÂ∫¶:</p>
                            {jobForm.files.map((file, index) => (
                              <div key={index} className="space-y-1">
                                <div className="flex justify-between text-xs text-blue-600">
                                  <span>{file.name}</span>
                                  <span>{uploadProgress.files[index] || 0}%</span>
                                </div>
                                <div className="w-full bg-blue-200 rounded-full h-2">
                                  <div
                                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                    style={{ width: `${uploadProgress.files[index] || 0}%` }}
                                  ></div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}

                      </div>
                    )}

                    {/* Ë∞ÉËØï‰ø°ÊÅØ - ÂºÄÂèëÁéØÂ¢ÉÊòæÁ§∫ */}
                    {process.env.NODE_ENV === 'development' && (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-sm">
                        <h4 className="font-medium text-yellow-800 mb-2">Ë∞ÉËØï‰ø°ÊÅØ:</h4>
                        <div className="grid grid-cols-2 gap-2 text-yellow-700">
                          <div>ÈÇÆÁÆ±: {jobForm.email || '(Á©∫)'}</div>
                          <div>ÈÇÆÁÆ±È™åËØÅ: {/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email) ? '‚úÖ' : '‚ùå'}</div>
                          <div>ÊèèËø∞ÈïøÂ∫¶: {jobForm.detailedDescription.trim().length}</div>
                          <div>ÊèèËø∞È™åËØÅ: {jobForm.detailedDescription.trim().length > 0 ? '‚úÖ' : '‚ùå'}</div>
                          <div>Ë°®ÂçïÊúâÊïà: {isFormValid() ? '‚úÖ' : '‚ùå'}</div>
                          <div>ÊåâÈíÆÁä∂ÊÄÅ: {(!isFormValid() || isUploading) ? 'Á¶ÅÁî®' : 'ÂêØÁî®'}</div>
                        </div>
                      </div>
                    )}

                    {/* Êèê‰∫§ÊåâÈíÆ */}
                    <div className="flex justify-center pt-6">
                      <Button
                        type="button"
                        onClick={handleSubmit}
                        className="bg-green-600 hover:bg-green-700 px-12 py-3 text-lg"
                        size="lg"
                        disabled={!isFormValid() || isUploading}
                      >
                        {isUploading ? (
                          <div className="flex items-center space-x-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            <span>ÂèëÂ∏É‰∏≠...</span>
                          </div>
                        ) : (
                          'ÂèëÂ∏ÉÈúÄÊ±Ç'
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>

      {/* Footer spacing */}
      <div className="py-16"></div>

      {/* Success Modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className="bg-white rounded-lg p-8 max-w-md mx-4 text-center">
            <div className="mb-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Check className="w-8 h-8 text-green-600" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {user ? '‰ªªÂä°ÂèëÂ∏ÉÊàêÂäüÔºÅ' : 'È°πÁõÆÂèëÂ∏ÉÊàêÂäüÔºÅ'}
              </h3>
              <p className="text-gray-600">
                {user ? (
                  'ÊÇ®ÁöÑ‰ªªÂä°Â∑≤ÊàêÂäüÂèëÈÄÅÂà∞ÊâÄÊúâÁõ∏ÂÖ≥ÂïÜÂÆ∂ÂíåÊäÄÂ∏àÔºåÂõûÂ§ç‰ø°ÊÅØ‰ºöÂèëÈÄÅÂà∞ÊÇ®ÁöÑÈÇÆÁÆ±Êàñ‰ºöÂëòÂå∫„ÄÇ'
                ) : (
                  <>
                    ÊÇ®ÁöÑÈ°πÁõÆÂ∑≤ÊàêÂäüÂèëÂ∏ÉÔºÅÊàë‰ª¨Â∑≤ÂêëÊÇ®ÁöÑÈÇÆÁÆ± <strong>{jobForm.email}</strong> ÂèëÈÄÅÁ°ÆËÆ§ÈÇÆ‰ª∂„ÄÇ
                    <br /><br />
                    <span className="text-sm">
                      ‚Ä¢ Á¨¶ÂêàÊù°‰ª∂ÁöÑÊäÄÂ∏à‰ºöÈÄöËøáÈÇÆ‰ª∂ËÅîÁ≥ªÊÇ®<br />
                      ‚Ä¢ ËØ∑Êü•Êî∂ÈÇÆ‰ª∂Ëé∑ÂèñÈ°πÁõÆËØ¶ÊÉÖÂíåÁÆ°ÁêÜÊñπÂºè<br />
                      ‚Ä¢ Â¶ÇÈúÄ‰øÆÊîπÈ°πÁõÆÔºåËØ∑ÂõûÂ§çÁ°ÆËÆ§ÈÇÆ‰ª∂<br />
                      ‚Ä¢ <strong>Ê≥®ÂÜåË¥¶Êà∑ÂêéÔºåÊÇ®ÂèØ‰ª•ËÆ§È¢ÜÊ≠§È°πÁõÆÂπ∂Âú®‰ª™Ë°®Áõò‰∏≠ÁÆ°ÁêÜ</strong>
                    </span>
                  </>
                )}
              </p>
            </div>
            <Button
              onClick={() => {
                setShowSuccessModal(false)
                window.location.href = 'https://buildbridge.nz/'
              }}
              className="bg-green-600 hover:bg-green-700 px-8 py-2"
            >
              OK
            </Button>
          </div>
        </div>
      )}

    </div>
  )
}
