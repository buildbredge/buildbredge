"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { X, FileImage, Video, Upload, AlertCircle } from "lucide-react"
import Link from "next/link"
import Image from "next/image"
import { projectsApi, userApi } from "@/lib/api"
import { uploadProjectImages, uploadProjectVideo, validateFile, formatFileSize } from "../../../lib/storage"
import GooglePlacesAutocomplete, { SelectedAddressDisplay, PlaceResult } from "@/components/GooglePlacesAutocomplete"
import { ConfirmationDialog } from "@/components/ConfirmationDialog"
import { RegisterDialog } from "@/components/RegisterDialog"
import { useAuth } from "@/contexts/AuthContext"
import { useRouter } from "next/navigation"

interface JobForm {
  detailedDescription: string
  email: string
  phone: string
  images: File[]
  video: File | null
  // Google PlacesÁõ∏ÂÖ≥Â≠óÊÆµ
  googlePlace?: PlaceResult
}

interface UploadProgress {
  images: { [index: number]: number }
  video: number
}


export default function PostJobPage() {
  console.log("=== POST JOB PAGE LOADED ===", new Date().toISOString())

  const { user } = useAuth()
  const router = useRouter()

  const [jobForm, setJobForm] = useState<JobForm>({
    detailedDescription: "",
    email: "",
    phone: "",
    images: [],
    video: null,
    googlePlace: undefined
  })
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [imagePreviews, setImagePreviews] = useState<string[]>([])
  const [videoPreview, setVideoPreview] = useState<string>("")
  const [imageUrls, setImageUrls] = useState<string[]>([])
  const [videoUrl, setVideoUrl] = useState<string>("")
  const [isUploading, setIsUploading] = useState(false)
  const [uploadProgress, setUploadProgress] = useState<UploadProgress>({ images: {}, video: 0 })
  const [uploadError, setUploadError] = useState<string>("")
  const imageInputRef = useRef<HTMLInputElement>(null)
  const videoInputRef = useRef<HTMLInputElement>(null)

  // Êñ∞Â¢ûÁöÑÂØπËØùÊ°ÜÁä∂ÊÄÅ
  const [showEmailDialog, setShowEmailDialog] = useState(false)
  const [showRegisterDialog, setShowRegisterDialog] = useState(false)
  const [emailCheckResult, setEmailCheckResult] = useState<{ exists: boolean; userType?: 'homeowner' | 'tradie' } | null>(null)
  const [validationErrors, setValidationErrors] = useState<string[]>([])
  const [isProcessing, setIsProcessing] = useState(false)



  const handleSubmit = async () => {
    // Á¨¨‰∏ÄÊ≠•ÔºöË°®ÂçïÈ™åËØÅ
    const errors = validateForm()
    if (errors.length > 0) {
      setValidationErrors(errors)
      setUploadError(`Ë°®ÂçïÈ™åËØÅÂ§±Ë¥•:\n${errors.join('\n')}`)
      return
    }

    setValidationErrors([])
    setUploadError("")

    // Á¨¨‰∫åÊ≠•ÔºöÂà§Êñ≠Áî®Êà∑ÊòØÂê¶ÁôªÂΩï
    if (user) {
      // Â∑≤ÁôªÂΩïÁî®Êà∑Áõ¥Êé•‰øùÂ≠òÈ°πÁõÆ
      await saveProject(user.id)
    } else {
      // Êú™ÁôªÂΩïÁî®Êà∑ÈúÄË¶ÅÊ£ÄÊü•ÈÇÆÁÆ±
      await checkEmailAndProceed()
    }
  }

  // Ê£ÄÊü•ÈÇÆÁÆ±Âπ∂ÂÜ≥ÂÆöÂêéÁª≠ÊµÅÁ®ã
  const checkEmailAndProceed = async () => {
    setIsProcessing(true)
    
    try {
      const result = await userApi.checkEmailExists(jobForm.email)
      setEmailCheckResult(result)
      
      if (result.exists) {
        // ÈÇÆÁÆ±Â∑≤Â≠òÂú®ÔºåÊòæÁ§∫ÁôªÂΩïÁ°ÆËÆ§ÂØπËØùÊ°Ü
        setShowEmailDialog(true)
      } else {
        // ÈÇÆÁÆ±‰∏çÂ≠òÂú®ÔºåÊòæÁ§∫Ê≥®ÂÜåÁ°ÆËÆ§ÂØπËØùÊ°Ü
        setShowRegisterDialog(true)
      }
    } catch (error) {
      console.error('Ê£ÄÊü•ÈÇÆÁÆ±Êó∂Âá∫Èîô:', error)
      setUploadError('Ê£ÄÊü•ÈÇÆÁÆ±Êó∂Âá∫ÈîôÔºåËØ∑ÈáçËØï')
    } finally {
      setIsProcessing(false)
    }
  }

  // ‰øùÂ≠òÈ°πÁõÆÁöÑÊ†∏ÂøÉÂáΩÊï∞
  const saveProject = async (userId: string | null = null) => {
    setIsUploading(true)
    setUploadError("")

    try {
      console.log('üöÄ ÂºÄÂßãÊèê‰∫§È°πÁõÆ...')

      // Ëé∑ÂèñÂú∞ÁêÜ‰ΩçÁΩÆ‰ø°ÊÅØ
      const locationString = jobForm.googlePlace?.address || ''
      const latitude = jobForm.googlePlace?.coordinates?.lat || null
      const longitude = jobForm.googlePlace?.coordinates?.lng || null

      console.log('üìç ‰ΩçÁΩÆ‰ø°ÊÅØ:', {
        location: locationString,
        coordinates: { latitude, longitude }
      })

      // Â¶ÇÊûúÊúâÊñá‰ª∂ÔºåÂÖà‰∏ä‰º†Êñá‰ª∂ÂÜçÂàõÂª∫È°πÁõÆ
      let uploadedImageUrls: string[] = []
      let uploadedVideoUrl: string | null = null
      
      // ‰∏∫‰∫ÜËé∑ÂèñÈ°πÁõÆIDÁî®‰∫éÊñá‰ª∂‰∏ä‰º†ÔºåÊàë‰ª¨ÂÖàÁîüÊàê‰∏Ä‰∏™‰∏¥Êó∂ID
      const tempProjectId = crypto.randomUUID()

      // ‰∏ä‰º†ÂõæÁâá
      if (jobForm.images.length > 0) {
        console.log('üì∏ ÂºÄÂßã‰∏ä‰º†ÂõæÁâá...')
        try {
          uploadedImageUrls = await uploadProjectImages(
            jobForm.images,
            tempProjectId,
            (fileIndex, progress) => {
              setUploadProgress(prev => ({
                ...prev,
                images: { ...prev.images, [fileIndex]: progress }
              }))
            }
          )
          console.log('‚úÖ ÂõæÁâá‰∏ä‰º†ÊàêÂäü:', uploadedImageUrls)
        } catch (error) {
          console.error('‚ùå ÂõæÁâá‰∏ä‰º†Â§±Ë¥•:', error)
          setUploadError(`ÂõæÁâá‰∏ä‰º†Â§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`)
          // ÁªßÁª≠ÊâßË°åÔºå‰∏çÈòªÊñ≠ÊµÅÁ®ã
        }
      }

      // ‰∏ä‰º†ËßÜÈ¢ë
      if (jobForm.video) {
        console.log('üé¨ ÂºÄÂßã‰∏ä‰º†ËßÜÈ¢ë...')
        try {
          uploadedVideoUrl = await uploadProjectVideo(
            jobForm.video,
            tempProjectId,
            (progress) => {
              setUploadProgress(prev => ({ ...prev, video: progress }))
            }
          )
          console.log('‚úÖ ËßÜÈ¢ë‰∏ä‰º†ÊàêÂäü:', uploadedVideoUrl)
        } catch (error) {
          console.error('‚ùå ËßÜÈ¢ë‰∏ä‰º†Â§±Ë¥•:', error)
          setUploadError(`ËßÜÈ¢ë‰∏ä‰º†Â§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`)
          // ÁªßÁª≠ÊâßË°åÔºå‰∏çÈòªÊñ≠ÊµÅÁ®ã
        }
      }

      // ÂàõÂª∫È°πÁõÆËÆ∞ÂΩïÔºåÂåÖÂê´Â∑≤‰∏ä‰º†ÁöÑÊñá‰ª∂URL
      const projectData: any = {
        description: jobForm.detailedDescription.substring(0, 100),
        location: locationString,
        latitude,
        longitude,
        detailed_description: jobForm.detailedDescription,
        email: jobForm.email,
        phone: jobForm.phone || null,
        images: uploadedImageUrls, // Áõ¥Êé•ÂåÖÂê´‰∏ä‰º†ÁöÑÂõæÁâáURL
        video: uploadedVideoUrl,
        status: 'published' as const,
        user_id: userId || null // Â¶ÇÊûúÊòØÂåøÂêçÁî®Êà∑Âàô‰∏∫null
      }

      console.log('üìã ÂàõÂª∫È°πÁõÆËÆ∞ÂΩïÔºàÂåÖÂê´Êñá‰ª∂URLÔºâ...', projectData)
      const createdProject = await projectsApi.create(projectData)
      
      if (!createdProject || !createdProject.id) {
        throw new Error('È°πÁõÆÂàõÂª∫Â§±Ë¥•ÔºöÊú™ËøîÂõûÊúâÊïàÁöÑÈ°πÁõÆID')
      }
      
      const projectId = createdProject.id
      console.log('‚úÖ È°πÁõÆÂàõÂª∫ÊàêÂäüÔºåID:', projectId)

      // ‰øùÂ≠òÊàêÂäüÔºåË∑≥ËΩ¨Âà∞È°πÁõÆËØ¶ÊÉÖÈ°µ
      router.push(`/projects/${projectId}`)

    } catch (error) {
      console.error('‚ùå ÂèëÂ∏ÉÈ°πÁõÆÊó∂Âá∫Èîô:', error)
      setUploadError(`ÂèëÂ∏ÉÈ°πÁõÆÊó∂Âá∫Èîô: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`)
    } finally {
      setIsUploading(false)
      setUploadProgress({ images: {}, video: 0 })
    }
  }

  // ÂØπËØùÊ°ÜÂ§ÑÁêÜÂáΩÊï∞
  const handleEmailDialogConfirm = () => {
    // Áî®Êà∑ÈÄâÊã©ÁôªÂΩï
    setShowEmailDialog(false)
    router.push(`/auth/login?email=${encodeURIComponent(jobForm.email)}`)
  }

  const handleEmailDialogCancel = () => {
    // Áî®Êà∑ÈÄâÊã©ÂåøÂêçÂèëÂ∏É
    setShowEmailDialog(false)
    saveProject(null) // nullË°®Á§∫ÂåøÂêçÁî®Êà∑
  }

  const handleRegisterDialogSuccess = (userId: string) => {
    // Ê≥®ÂÜåÊàêÂäüÔºå‰øùÂ≠òÈ°πÁõÆÂà∞Êñ∞Áî®Êà∑
    setShowRegisterDialog(false)
    saveProject(userId)
  }

  const handleRegisterDialogError = (error: string) => {
    setUploadError(`Ê≥®ÂÜåÂ§±Ë¥•: ${error}`)
  }

  const handleRegisterDialogCancel = () => {
    // Áî®Êà∑ÈÄâÊã©ÂåøÂêçÂèëÂ∏É
    setShowRegisterDialog(false)
    saveProject(null) // nullË°®Á§∫ÂåøÂêçÁî®Êà∑
  }

  const updateJobForm = (field: keyof JobForm, value: any) => {
    setJobForm(prev => ({ ...prev, [field]: value }))
    // Ê∏ÖÈô§ÈîôËØØ‰ø°ÊÅØÂΩìÁî®Êà∑ÂºÄÂßãËæìÂÖ•Êó∂
    if (uploadError) {
      setUploadError("")
    }
    if (validationErrors.length > 0) {
      setValidationErrors([])
    }
  }

  // Â§ÑÁêÜGoogle PlacesÂú∞ÂùÄÈÄâÊã©
  const handlePlaceSelect = (place: PlaceResult) => {
    setJobForm(prev => ({
      ...prev,
      googlePlace: place
    }))
  }


  const handleImageUpload = async (files: FileList | null) => {
    if (!files || isUploading) return
    
    setUploadError("") // Ê∏ÖÈô§‰πãÂâçÁöÑÈîôËØØ

    const newFiles = Array.from(files).slice(0, 5 - jobForm.images.length)
    
    // È™åËØÅÊñá‰ª∂
    const validFiles: File[] = []
    const errors: string[] = []

    for (const file of newFiles) {
      const validation = validateFile(file, 'image')
      if (validation.valid) {
        validFiles.push(file)
      } else {
        errors.push(`${file.name}: ${validation.error}`)
      }
    }

    if (errors.length > 0) {
      setUploadError(`‰ª•‰∏ãÂõæÁâáÊñá‰ª∂Êó†Ê≥ï‰∏ä‰º†:\n${errors.join('\n')}`)
    }

    if (validFiles.length === 0) {
      if (imageInputRef.current) {
        imageInputRef.current.value = ''
      }
      return
    }

    // ÂàõÂª∫È¢ÑËßà
    const newPreviews = validFiles.map(file => URL.createObjectURL(file))
    setImagePreviews(prev => [...prev, ...newPreviews])
    setJobForm(prev => ({ ...prev, images: [...prev.images, ...validFiles] }))

    if (imageInputRef.current) {
      imageInputRef.current.value = ''
    }
  }

  const handleVideoUpload = async (files: FileList | null) => {
    if (!files || files.length === 0 || isUploading) return
    
    setUploadError("") // Ê∏ÖÈô§‰πãÂâçÁöÑÈîôËØØ

    const file = files[0]
    
    // È™åËØÅÊñá‰ª∂
    const validation = validateFile(file, 'video')
    if (!validation.valid) {
      setUploadError(`ËßÜÈ¢ëÊñá‰ª∂‰∏ä‰º†Â§±Ë¥•: ${validation.error}`)
      if (videoInputRef.current) {
        videoInputRef.current.value = ''
      }
      return
    }

    // ÂàõÂª∫È¢ÑËßà
    const videoUrl = URL.createObjectURL(file)
    setVideoPreview(videoUrl)
    setJobForm(prev => ({ ...prev, video: file }))

    if (videoInputRef.current) {
      videoInputRef.current.value = ''
    }
  }

  const removeImage = (index: number) => {
    const newPreviews = imagePreviews.filter((_, i) => i !== index)
    const newImages = jobForm.images.filter((_, i) => i !== index)

    URL.revokeObjectURL(imagePreviews[index])
    setImagePreviews(newPreviews)
    setJobForm(prev => ({ ...prev, images: newImages }))
  }

  const removeVideo = () => {
    if (videoPreview) {
      URL.revokeObjectURL(videoPreview)
    }
    setVideoPreview('')
    setJobForm(prev => ({ ...prev, video: null }))
  }

  // Â¢ûÂº∫ÁöÑË°®ÂçïÈ™åËØÅÂáΩÊï∞ÔºàÁî®‰∫éÊèê‰∫§Êó∂ÁöÑÂÆåÊï¥È™åËØÅÔºâ
  const validateForm = (): string[] => {
    const errors: string[] = []
    
    // È™åËØÅÈÇÆÁÆ±
    if (!jobForm.email.trim()) {
      errors.push("ËØ∑Â°´ÂÜôÈÇÆÁÆ±Âú∞ÂùÄ")
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email)) {
      errors.push("ËØ∑Â°´ÂÜôÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ")
    }
    
    // È™åËØÅ‰ΩçÁΩÆ‰ø°ÊÅØ
    if (!jobForm.googlePlace) {
      errors.push("ËØ∑ÈÄâÊã©È°πÁõÆ‰ΩçÁΩÆ")
    }
    
    // È™åËØÅËØ¶ÁªÜÊèèËø∞
    if (!jobForm.detailedDescription.trim()) {
      errors.push("ËØ∑ÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç")
    } else if (jobForm.detailedDescription.trim().length < 10) {
      errors.push("È°πÁõÆÊèèËø∞Ëá≥Â∞ëÈúÄË¶Å10‰∏™Â≠óÁ¨¶")
    }
    
    return errors
  }

  // ÁÆÄÂåñÁöÑË°®ÂçïÈ™åËØÅÂáΩÊï∞ÔºàÁî®‰∫éÊåâÈíÆdisabledÁä∂ÊÄÅ - Âè™Ê£ÄÊü•ÂøÖÂ°´È°πÔºâ
  const isFormValid = () => {
    // Âè™Ê£ÄÊü•ÈÇÆÁÆ±ÂíåÈ°πÁõÆËØ¶ÊÉÖÔºàÂè™Ë¶ÅÊúâÂÜÖÂÆπÂç≥ÂèØÔºâ
    const hasEmail = jobForm.email.trim() && /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email)
    const hasDescription = jobForm.detailedDescription.trim().length > 0
    
    // Ê∑ªÂä†Êõ¥ËØ¶ÁªÜÁöÑË∞ÉËØï‰ø°ÊÅØ
    const isValid = hasEmail && hasDescription
    console.log('=== Ë°®ÂçïÈ™åËØÅÁä∂ÊÄÅ ===', {
      email: jobForm.email,
      emailTrimmed: jobForm.email.trim(),
      emailRegexTest: /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email),
      hasEmail,
      description: jobForm.detailedDescription,
      descriptionTrimmed: jobForm.detailedDescription.trim(),
      descriptionLength: jobForm.detailedDescription.trim().length,
      hasDescription,
      isUploading,
      isProcessing,
      finalIsValid: isValid,
      buttonShouldBeDisabled: !isValid || isUploading || isProcessing
    })
    
    return isValid
  }



  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="sticky top-0 z-50 bg-white border-b">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <div className="w-8 h-8 bg-green-600 rounded flex items-center justify-center">
                <span className="text-white font-bold text-sm">B</span>
              </div>
              <span className="text-xl font-bold text-gray-800">BuildBridge</span>
              <span className="text-sm text-gray-500">ÂèëÂ∏ÉÈúÄÊ±Ç</span>
            </Link>
            <Link href="/">
              <Button variant="ghost" size="sm" className="p-2">
                <X className="w-5 h-5" />
              </Button>
            </Link>
          </div>
        </div>
      </div>


      {/* Main content */}
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center mb-12">
            <h1 className="text-4xl md:text-5xl font-normal text-green-600 mb-6">
              ‰∏ìÂ±ûÂÆ¢Êúç‰∏∫ÊÇ®ÊúçÂä°
            </h1>
            <p className="text-xl text-gray-600">
              Â°´ÂÜôÊÇ®ÁöÑÈúÄÊ±Ç‰ø°ÊÅØÔºåÊàë‰ª¨‰∏∫ÊÇ®ÂåπÈÖçÂΩìÂú∞ÁöÑ‰∏ì‰∏ö‰∫∫Â£´„ÄÇ
            </p>
          </div>

          <form className="space-y-8">
            {/* Âçï‰∏ÄË°®ÂçïÂç°Áâá */}
            <div className="bg-white rounded-lg border p-8 shadow-sm">
              <div className="space-y-8">
                {/* ËÅîÁ≥ª‰ø°ÊÅØ */}
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 mb-6">ËÅîÁ≥ª‰ø°ÊÅØ</h2>
                  <div className="grid gap-6 md:grid-cols-2">
                    <div>
                      <Label htmlFor="email" className="text-lg font-medium">ÈÇÆÁÆ±Âú∞ÂùÄ *</Label>
                      <Input
                        id="email"
                        type="email"
                        placeholder="your.email@example.com"
                        value={jobForm.email}
                        onChange={(e) => updateJobForm('email', e.target.value)}
                        className="mt-2"
                      />
                    </div>

                    <div>
                      <Label htmlFor="phone" className="text-lg font-medium">ËÅîÁ≥ªÊñπÂºèÔºàÁîµËØùÔºâ</Label>
                      <Input
                        id="phone"
                        type="tel"
                        placeholder="+64 21 123 4567"
                        value={jobForm.phone}
                        onChange={(e) => updateJobForm('phone', e.target.value)}
                        className="mt-2"
                      />
                    </div>
                  </div>
                </div>

                {/* ‰ΩçÁΩÆ‰ø°ÊÅØ */}
                <div>
               
                  <div className="space-y-4">
                    {!jobForm.googlePlace ? (
                      <GooglePlacesAutocomplete
                        onPlaceSelect={handlePlaceSelect}
                        placeholder="ËæìÂÖ•ÊÇ®ÁöÑËØ¶ÁªÜÂú∞ÂùÄ..."
                        label="È°πÁõÆ‰ΩçÁΩÆ"
                        className="h-12 text-lg"
                      />
                    ) : (
                      <SelectedAddressDisplay
                        place={jobForm.googlePlace}
                        onEdit={() => setJobForm(prev => ({ ...prev, googlePlace: undefined }))}
                      />
                    )}
                  </div>
                </div>

                {/* È°πÁõÆËØ¶ÊÉÖ */}
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 mb-6">È°πÁõÆËØ¶ÊÉÖ</h2>
                  <div className="space-y-6">
                    <div>
                      <Label htmlFor="detailed-description" className="text-lg font-medium">ÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç *</Label>
                      <p className="text-sm text-gray-500 mb-3">
                        ËØ∑ËØ¶ÁªÜÊèèËø∞ÊÇ®ÁöÑÈúÄÊ±ÇÔºåÊØîÂ¶ÇÔºöÊàëÊÉ≥Êõ¥Êç¢5‰∏™Ê∞¥ÈæôÂ§¥ÔºåÂ∑≤ÊúâÁÆ°ÈÅì„ÄÇÊàñËÄÖÊàëÊÉ≥Ë£Ö‰øÆÊàëÁöÑÊàøÂ≠êÔºåÈúÄË¶ÅÊõ¥Êç¢Â£ÅÁ∫∏ÔºåÁ≤âÂà∑Â±ãÈ°∂Ôºå‰ª•ÂèäÊõ¥Êç¢Á™óÊà∑„ÄÇÂÜçÊàñËÄÖÊàëÊÉ≥Âª∫‰∏ÄÊ†ãÊàøÂ≠êÈúÄË¶ÅÂàÜÂâ≤ÂúüÂú∞ËÆæËÆ°ÁªìÊûÑÊé¢Êü•Âú∞Âü∫Á≠âÁ≠â
                      </p>
                      <Textarea
                        id="detailed-description"
                        placeholder="ÊØîÂ¶ÇÊàëÊÉ≥Êõ¥Êç¢Ê∞¥ÁÆ°„ÄÅË£Ö‰øÆÊàøÂ≠ê„ÄÅÂª∫ÈÄ†Êñ∞ÊàøÁ≠âÔºåËØ∑ËØ¶ÁªÜÊèèËø∞ÊÇ®ÁöÑÈ°πÁõÆÈúÄÊ±Ç..."
                        value={jobForm.detailedDescription}
                        onChange={(e) => updateJobForm('detailedDescription', e.target.value)}
                        className="min-h-[150px] text-base"
                        rows={6}
                      />
                    </div>

                    {/* Â™í‰Ωì‰∏ä‰º† */}
                    <div className="grid gap-6 md:grid-cols-2">
                      {/* ÂõæÁâá‰∏ä‰º† */}
                      <div>
                        <Label className="text-lg font-medium">‰∏ä‰º†Áõ∏ÂÖ≥ÂõæÁâáÔºàÊúÄÂ§ö5Âº†Ôºâ</Label>

                        {imagePreviews.length > 0 && (
                          <div className="grid grid-cols-2 gap-4 mt-3 mb-4">
                            {imagePreviews.map((preview, index) => (
                              <div key={index} className="relative group">
                                <div className="aspect-square rounded-lg overflow-hidden bg-gray-100 border">
                                  <Image
                                    src={preview}
                                    alt={`È¢ÑËßàÂõæÁâá ${index + 1}`}
                                    width={200}
                                    height={200}
                                    className="w-full h-full object-cover"
                                  />
                                </div>
                                <Button
                                  variant="destructive"
                                  size="sm"
                                  className="absolute -top-2 -right-2 w-6 h-6 p-0 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                  onClick={() => removeImage(index)}
                                >
                                  <X className="w-3 h-3" />
                                </Button>
                              </div>
                            ))}
                          </div>
                        )}

                        {imagePreviews.length < 5 && (
                          <Card className="border-dashed border-2 border-gray-300 hover:border-green-400 transition-colors mt-3">
                            <CardContent className="p-6">
                              <div
                                className="text-center cursor-pointer"
                                onClick={() => imageInputRef.current?.click()}
                              >
                                <FileImage className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                                <p className="text-gray-700 font-medium mb-2">ÁÇπÂáª‰∏ä‰º†ÂõæÁâá</p>
                                <p className="text-sm text-gray-500">
                                  ÊîØÊåÅ JPG„ÄÅPNG„ÄÅWebP Ê†ºÂºèÔºåÂçïÂº†ÊúÄÂ§ß 10MB
                                </p>
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        <input
                          ref={imageInputRef}
                          type="file"
                          multiple
                          accept="image/jpeg,image/png,image/webp"
                          onChange={(e) => handleImageUpload(e.target.files)}
                          className="hidden"
                        />
                      </div>

                      {/* ËßÜÈ¢ë‰∏ä‰º† */}
                      <div>
                        <Label className="text-lg font-medium">‰∏ä‰º†ËßÜÈ¢ëÔºàÂèØÈÄâÔºâ</Label>

                        {videoPreview && (
                          <div className="mt-3 mb-4">
                            <div className="relative group">
                              <video
                                src={videoPreview}
                                controls
                                className="w-full max-h-64 rounded-lg bg-gray-100"
                              />
                              <Button
                                variant="destructive"
                                size="sm"
                                className="absolute -top-2 -right-2 w-6 h-6 p-0 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                onClick={removeVideo}
                              >
                                <X className="w-3 h-3" />
                              </Button>
                            </div>
                          </div>
                        )}

                        {!videoPreview && (
                          <Card className="border-dashed border-2 border-gray-300 hover:border-green-400 transition-colors mt-3">
                            <CardContent className="p-6">
                              <div
                                className="text-center cursor-pointer"
                                onClick={() => videoInputRef.current?.click()}
                              >
                                <Video className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                                <p className="text-gray-700 font-medium mb-2">ÁÇπÂáª‰∏ä‰º†ËßÜÈ¢ë</p>
                                <p className="text-sm text-gray-500">
                                  ÊîØÊåÅ MP4„ÄÅMOV„ÄÅAVI„ÄÅWMV Ê†ºÂºèÔºåÊúÄÂ§ß 100MB
                                </p>
                              </div>
                            </CardContent>
                          </Card>
                        )}

                        <input
                          ref={videoInputRef}
                          type="file"
                          accept="video/mp4,video/quicktime,video/avi,video/x-ms-wmv,.mp4,.mov,.avi,.wmv"
                          onChange={(e) => handleVideoUpload(e.target.files)}
                          className="hidden"
                        />
                      </div>
                    </div>

                    {/* ÈîôËØØ‰ø°ÊÅØÊòæÁ§∫ */}
                    {uploadError && (
                      <div className="flex items-start space-x-2 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700">
                        <AlertCircle className="w-5 h-5 flex-shrink-0 mt-0.5" />
                        <div className="flex-1">
                          <p className="text-sm whitespace-pre-line">{uploadError}</p>
                        </div>
                      </div>
                    )}

                    {/* ‰∏ä‰º†ËøõÂ∫¶ÊòæÁ§∫ */}
                    {isUploading && (
                      <div className="space-y-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="flex items-center space-x-2">
                          <Upload className="w-5 h-5 text-blue-600" />
                          <h4 className="font-medium text-blue-900">Ê≠£Âú®‰∏ä‰º†Êñá‰ª∂...</h4>
                        </div>

                        {/* ÂõæÁâá‰∏ä‰º†ËøõÂ∫¶ */}
                        {jobForm.images.length > 0 && (
                          <div className="space-y-2">
                            <p className="text-sm text-blue-700">ÂõæÁâá‰∏ä‰º†ËøõÂ∫¶:</p>
                            {jobForm.images.map((file, index) => (
                              <div key={index} className="space-y-1">
                                <div className="flex justify-between text-xs text-blue-600">
                                  <span>{file.name}</span>
                                  <span>{uploadProgress.images[index] || 0}%</span>
                                </div>
                                <div className="w-full bg-blue-200 rounded-full h-2">
                                  <div
                                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                    style={{ width: `${uploadProgress.images[index] || 0}%` }}
                                  ></div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* ËßÜÈ¢ë‰∏ä‰º†ËøõÂ∫¶ */}
                        {jobForm.video && (
                          <div className="space-y-2">
                            <p className="text-sm text-blue-700">ËßÜÈ¢ë‰∏ä‰º†ËøõÂ∫¶:</p>
                            <div className="space-y-1">
                              <div className="flex justify-between text-xs text-blue-600">
                                <span>{jobForm.video.name}</span>
                                <span>{uploadProgress.video}%</span>
                              </div>
                              <div className="w-full bg-blue-200 rounded-full h-2">
                                <div
                                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                                  style={{ width: `${uploadProgress.video}%` }}
                                ></div>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Ë∞ÉËØï‰ø°ÊÅØ - ÂºÄÂèëÁéØÂ¢ÉÊòæÁ§∫ */}
                    {process.env.NODE_ENV === 'development' && (
                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-sm">
                        <h4 className="font-medium text-yellow-800 mb-2">Ë∞ÉËØï‰ø°ÊÅØ:</h4>
                        <div className="grid grid-cols-2 gap-2 text-yellow-700">
                          <div>ÈÇÆÁÆ±: {jobForm.email || '(Á©∫)'}</div>
                          <div>ÈÇÆÁÆ±È™åËØÅ: {/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(jobForm.email) ? '‚úÖ' : '‚ùå'}</div>
                          <div>ÊèèËø∞ÈïøÂ∫¶: {jobForm.detailedDescription.trim().length}</div>
                          <div>ÊèèËø∞È™åËØÅ: {jobForm.detailedDescription.trim().length > 0 ? '‚úÖ' : '‚ùå'}</div>
                          <div>Ë°®ÂçïÊúâÊïà: {isFormValid() ? '‚úÖ' : '‚ùå'}</div>
                          <div>ÊåâÈíÆÁä∂ÊÄÅ: {(!isFormValid() || isUploading || isProcessing) ? 'Á¶ÅÁî®' : 'ÂêØÁî®'}</div>
                        </div>
                      </div>
                    )}

                    {/* Êèê‰∫§ÊåâÈíÆ */}
                    <div className="flex justify-center pt-6">
                      <Button
                        type="button"
                        onClick={handleSubmit}
                        className="bg-green-600 hover:bg-green-700 px-12 py-3 text-lg"
                        size="lg"
                        disabled={!isFormValid() || isUploading || isProcessing}
                      >
                        {isUploading ? (
                          <div className="flex items-center space-x-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            <span>ÂèëÂ∏É‰∏≠...</span>
                          </div>
                        ) : isProcessing ? (
                          <div className="flex items-center space-x-2">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            <span>Ê£ÄÊü•‰∏≠...</span>
                          </div>
                        ) : (
                          'ÂèëÂ∏ÉÈúÄÊ±Ç'
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>

      {/* Footer spacing */}
      <div className="py-16"></div>

      {/* ÂØπËØùÊ°ÜÁªÑ‰ª∂ */}
      {emailCheckResult && (
        <ConfirmationDialog
          open={showEmailDialog}
          onClose={() => setShowEmailDialog(false)}
          type="email-exists"
          email={jobForm.email}
          onConfirm={handleEmailDialogConfirm}
          onCancel={handleEmailDialogCancel}
          isLoading={isUploading}
        />
      )}

      <ConfirmationDialog
        open={showRegisterDialog && !emailCheckResult?.exists}
        onClose={() => setShowRegisterDialog(false)}
        type="register-prompt"
        email={jobForm.email}
        onConfirm={() => {
          setShowRegisterDialog(false)
          // ËøôÈáåÂ∫îËØ•ÊâìÂºÄÂÆûÈôÖÁöÑÊ≥®ÂÜåÂØπËØùÊ°ÜÔºå‰ΩÜÁî±‰∫éÂ§çÊùÇÊÄßÔºåÊöÇÊó∂Ë∑≥ËΩ¨Âà∞Ê≥®ÂÜåÈ°µÈù¢
          router.push(`/auth/register?email=${encodeURIComponent(jobForm.email)}`)
        }}
        onCancel={handleRegisterDialogCancel}
        isLoading={isUploading}
      />

      <RegisterDialog
        open={false} // ÊöÇÊó∂Á¶ÅÁî®Ôºå‰ΩøÁî®È°µÈù¢Ë∑≥ËΩ¨‰ª£Êõø
        onClose={() => setShowRegisterDialog(false)}
        email={jobForm.email}
        onSuccess={handleRegisterDialogSuccess}
        onError={handleRegisterDialogError}
      />
    </div>
  )
}
