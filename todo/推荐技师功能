  推荐技师功能实现完成

  ✅ 已完成的功能：

  1. 数据库匹配逻辑

  - API端点: /api/projects/[id]/recommended-tradies -
  根据项目类别匹配技师
  - 智能匹配：
    - 优先匹配：完全匹配 profession_id 的技师
    - 次优匹配：同 category_id 下其他专业的技师
    - 兜底匹配：返回评分高的技师
  - 地理位置排序：基于距离和服务半径筛选和排序
  - 评分权重：结合距离、评分、经验年限排序

  2. 项目详情页推荐技师

  - 位置: src/app/projects/[id]/page.tsx 底部新增推荐技师区域
  - TradieRecommendations组件：显示匹配的技师卡片
  - TradieModal组件：点击技师弹出详细信息窗口
  - 快速联系：电话和邮件一键联系功能

  3. 技师工作台匹配项目

  - API端点: /api/tradies/[id]/matched-projects -
  获取技师匹配的项目
  - MatchedProjectsList组件：替换原有的"可接项目"
  - 智能匹配：基于技师的 profession 和 category 匹配项目
  - 分页支持：支持项目列表分页浏览

  4. 技师专业技能管理

  - 多专业选择：技师可选择多个专业技能
  - API端点: /api/tradies/[id]/professions - 管理技师专业技能
  - ProfessionSelector组件：分类展示和选择专业技能
  - 实时保存：选择后立即保存到数据库

  5. 用户界面优化

  - 响应式设计：支持移动端和桌面端
  - 交互体验：hover效果、loading状态、错误处理
  - 信息展示：技师评分、距离、经验、联系方式
  - 快速操作：一键联系、项目详情跳转

  🔧 技术特点：

  1. 高性能匹配算法：多层次匹配策略，确保找到最合适的技师
  2. 地理位置智能：结合经纬度计算距离，考虑服务半径
  3. 实时数据同步：专业技能修改后立即影响匹配结果
  4. 用户体验优先：loading状态、错误处理、响应式设计
  5. 可扩展架构：组件化设计，易于维护和扩展

  📱 使用流程：

  1. 房主发布项目 → 选择类别和专业 → 项目详情页自动显示推荐技师
  2. 技师设置专业 → 个人资料页选择专业技能 → 工作台显示匹配项目
  3. 双向匹配 → 点击查看详情 → 一键联系合作

  1.tradie_professions表里没有category_id,需要添加这个column   
  2 技师用户再刚刚注册完，选择专业技能时，只选择了一个专业技能（CATEGORIES表) 需要把这个存到tradie_professions表里,
  记录下所选的category_id
  3.在profile页面出现下面的错误
   </Label>
  248 |           <div className="space-y-3">
> 249 |             {categories.map((category) => {
      |                         ^
  250 |               const categoryProfessions = getProfessionsForCategory(category.id)
  251 |               const isOpen = openCategories.includes(category.id)
  252 |               const selectedCount = categoryProfessions.filter(p => 


  技师工作台中的选择工作类别验证功能可以去掉了,因为注册的时候已经选择了工作领域.这两个是一回事.
  只需要读取tradie_professions表中的category_id就可以了.



  # BuildBridge 项目和技师匹配逻辑备份文档

生成时间：2025-08-17

## 概述
该文档记录了 BuildBridge 平台中项目和技师之间的匹配逻辑，包括双向匹配：
1. **项目推荐技师**：为指定项目寻找合适的技师
2. **技师匹配项目**：为指定技师寻找合适的项目

## 核心数据模型

### 项目表 (projects)
- `id`: 项目ID
- `category_id`: 项目所属分类ID
- `profession_id`: 项目所需具体职业ID
- `latitude/longitude`: 项目地理坐标
- `status`: 项目状态 (published, draft, completed, cancelled)

### 技师表 (users)
- `id`: 技师ID
- `latitude/longitude`: 技师地理坐标
- `service_radius`: 技师服务半径（公里）
- `rating`: 技师评分
- `status`: 技师状态 (approved, pending, suspended)

### 技师职业关联表 (tradie_professions)
- `tradie_id`: 技师ID
- `profession_id`: 职业ID（可为空）
- `category_id`: 分类ID

### 分类职业表 (categories/professions)
- 分类包含多个职业
- 职业属于特定分类

## 匹配逻辑详解

### 1. 项目推荐技师 (/api/projects/[id]/recommended-tradies)

**目标**：为指定项目找到最合适的技师

**匹配优先级**：
1. **主要匹配（category_id）**：
   - 查找 `tradie_professions.category_id = project.category_id` 的技师
   - 返回该分类下的所有匹配技师（无数量限制）
   - 按评分降序排列

2. **次要匹配（profession_id）**：
   - 如果主要匹配无结果，查找 `tradie_professions.profession_id = project.profession_id` 的技师
   - 返回该职业下的所有匹配技师（无数量限制）
   - 按评分降序排列

3. **兜底匹配**：
   - 如果以上都无结果，返回任意可用技师
   - 限制返回 10 个技师避免过多无关结果
   - 按评分降序排列

**筛选条件**：
- 技师状态必须为 `approved`
- 技师必须具有 `tradie` 角色
- 技师在服务半径内（如果有坐标信息）

**数据处理**：
- **去重**：同一技师可能因多个职业出现多次，需要合并
- **距离计算**：使用 Haversine 公式计算项目与技师间距离
- **服务范围筛选**：只返回在技师服务半径内的项目
- **排序**：优先按距离排序，其次按评分排序

### 2. 技师匹配项目 (/api/tradies/[id]/matched-projects)

**目标**：为指定技师找到最合适的项目

**匹配优先级**：
1. **主要匹配（category_id）**：
   - 查找 `project.category_id IN (技师的所有category_id)` 的项目
   - 返回分类匹配的项目
   - 匹配类型：`category`

2. **次要匹配（profession_id）**：
   - 如果主要匹配无结果，查找 `project.profession_id IN (技师的所有profession_id)` 的项目
   - 返回职业精确匹配的项目
   - 匹配类型：`exact`

3. **兜底匹配**：
   - 如果以上都无结果，返回最近发布的项目
   - 匹配类型：`fallback`

**筛选条件**：
- 项目状态必须为 `published`
- 项目在技师服务半径内（如果有坐标信息）

**分页支持**：
- 支持分页查询（page, limit）
- 返回总数和页数信息

**数据处理**：
- **距离计算**：计算技师与项目间距离
- **服务范围筛选**：只返回在技师服务半径内的项目
- **排序**：优先按距离排序，其次按发布时间排序（最新优先）

## 距离计算算法

使用 **Haversine 公式** 计算地球表面两点间的最短距离：

```javascript
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371 // 地球半径（公里）
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLon = (lon2 - lon1) * Math.PI / 180
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  return R * c
}
```

## 关键特性

### 数据完整性处理
- **坐标缺失**：如果项目或技师缺少地理坐标，则跳过距离计算和服务范围筛选
- **职业信息缺失**：允许 profession_id 为空，但 category_id 必须存在
- **去重处理**：技师可能因多个职业关联同一项目，需要合并重复结果

### 性能优化
- **索引使用**：在 category_id, profession_id, status 等字段上建立索引
- **分页查询**：避免一次性返回大量数据
- **条件优化**：优先使用最精确的匹配条件

### 扩展性考虑
- **匹配策略可配置**：当前硬编码优先级，未来可考虑配置化
- **评分权重**：当前简单按评分排序，未来可加入复杂权重算法
- **地理范围**：当前使用固定的服务半径，未来可考虑动态调整

## 数据库查询示例

### 项目推荐技师查询
```sql
-- 主要匹配：按分类查找技师
SELECT u.*, tp.category_id 
FROM users u
JOIN user_roles ur ON u.id = ur.user_id
JOIN tradie_professions tp ON u.id = tp.tradie_id
WHERE ur.role_type = 'tradie' 
  AND u.status = 'approved'
  AND tp.category_id = '项目的category_id'
ORDER BY u.rating DESC;
```

### 技师匹配项目查询
```sql
-- 主要匹配：按分类查找项目
SELECT p.* 
FROM projects p
WHERE p.status = 'published'
  AND p.category_id IN (SELECT tp.category_id FROM tradie_professions tp WHERE tp.tradie_id = '技师ID')
ORDER BY p.created_at DESC;
```

## 文件位置

### API 路由
- `/src/app/api/projects/[id]/recommended-tradies/route.ts`
- `/src/app/api/tradies/[id]/matched-projects/route.ts`

### 前端组件
- `/src/components/MatchedProjectsList.tsx`

### 数据库函数
- `calculate_distance()` 函数（如果在数据库中实现）

## 注意事项

1. **数据一致性**：确保 tradie_professions 表中的 category_id 与 professions 表一致
2. **性能监控**：大量数据时需要监控查询性能
3. **业务规则**：当前逻辑相对简单，实际业务可能需要更复杂的匹配规则
4. **错误处理**：需要妥善处理数据库查询失败、网络异常等情况

---

**备份说明**：这是当前（2025-08-17）的匹配逻辑实现，记录用于日后参考和回滚。